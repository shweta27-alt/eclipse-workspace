package HashMap;

import java.util.LinkedList;

public class Implementation_hashMap {
	public static void main(String[] args) {
		
	}
	
	public void put(K key, V value) {
		int bi = hashFunction(key);
		int di = SearchInLL(key,bi);
		
		if(di != -1) {
			Node node = buckets[bi].get(di);
			node.value = value;
		}else {
			buckets[bi].add(new Node(key, value));
			n++;
		}
		
		double lambda =(double)n/N;
		if(lambda>2.0) {
			rehash();
		}
	}
	
	
	public V remove( K key) {
		int bi = hashFunction(key);
		int di = SearchInLL(key,bi);
		
		if(di != -1) {
			Node node = buckets[bi].get(di);
			node.value = value;
		}else {
			buckets[bi].add(new Node(key, value));
			n++;
		}
	}
	LinkedList<E>oid rehash() {
		LinkedList<Node> oldBuck[] = buckets;
		buckets = new LInkedList[N*2];
		N = 2*N;
		for(int i=0;i<buckets.length;i++) {
			buckets[i] = new LinkedList<>();
		}
		
		//nodes -> add in bucket
		for(int i=0;i<oldBuck.length;i++) {
	}

}


















